= Recorded Future API =

== version 1.0.0 ==

Contents

    # *1 *[version 1.0.0#version_1.0.0]
    # <a href="#TOC-Introduction">*2 *Introduction</a>
        # <a href="#TOC-Quick-Start:-Creating-Requests.">*2.1 *Quick Start: Creating Requests.</a>
    # <a href="#TOC-Input-and-Output-in-JSON">*3 *Input and Output in JSON</a>
    # <a href="#TOC-Query-specification">*4 *Query specification</a>
        # <a href="#TOC-Matching-on-instance-identity-or-ty">*4.1 *Matching on instance identity or type</a>
        # <a href="#TOC-Matching-on-instance-time">*4.2 *Matching on instance time</a>
        # <a href="#TOC-Matching-on-the-canonical-item">*4.3 *Matching on the canonical item</a>
        # <a href="#TOC-Matching-on-attributes">*4.4 *Matching on attributes</a>
        # <a href="#TOC-Matching-on-document-and-source-asp">*4.5 *Matching on document and source aspects</a>
        # <a href="#TOC-Output-fields">*4.6 *Output fields</a>
        # <a href="#TOC-Entity-details">*4.7 *Entity details</a>
        # <a href="#TOC-Response-specification">*4.8 *Response specification</a>
    # <a href="#TOC-Aggregate-Queries">*5 *Aggregate Queries</a>
    # <a href="#TOC-Examples">*6 *Examples</a>
        # <a href="#TOC-Query-Examples">*6.1 *Query Examples</a>
        # <a href="#TOC-Response-Example">*6.2 *Response Example</a>
    # <a href="#TOC-Working-with-the-API-in-the-Recorde">*7 *Working with the API in the Recorded Future UI</a>
    # <a href="#TOC-Using-the-Recorded-Future-API-with-">*8 *Using the Recorded Future API with R</a>
    # <a href="#TOC-Using-the-Recorded-Future-API-with-1">*9 *Using the Recorded Future API with Python</a>
    # <a href="#TOC-Entity-and-Event-Types">*10 *Entity and Event Types</a>
        # <a href="#TOC-Entity-Types">*10.1 *Entity Types</a>
        # <a href="#TOC-Event-Types">*10.2 *Event Types</a>

== Introduction ==

The Recorded Futureâ€™s API enables you to build analytic applications and perform analysis which is aware of events happening around the globe 24x7, with extensive historical records. You can perform queries and receive results from the Recorded Future Temporal Analytics Engine across a vast set of events, entities, and time points spanning from the far past into the future.

Your application can come alive with real time access into the Recorded Future engine, completely aware of events as they unfold around the world - and your analysis of for example financial markets can be made aware of events involving companies, people, products, etc. Historical archives allows you to extensively backtest results.

Sample applications and analysis built/done with the Recorded Future API include
    * Interactive dashboards of global events
    * Google earth overlay of global events
    * Back testing whether FT Alphaville (high profile financial blog) is "better" than general news in predicting stock returns
    * Back testing whether Recorded Future momentum metric accurately predicts equity trading volume

To access Recorded Future through the API:
    # Request a Recorded Future API token.
    # Create a structured JSON string that describes the query.
    # Create and submit the associated URL.
    # Retrieve and parse the results.

=== Quick Start: Creating Requests. ===

Queries are sent using HTTP GET to
	[http://api.recordedfuture.com/ws/rfq/instances?q=query&compress=usecompression http://api.recordedfuture.com/ws/rfq/instances?q=_query_&compress=_usecompression_]
    
Zip compression is enabled if the optional attribute compress=usecompression. If the attribute is not set, no compression is used.

Note: Queries can also be sent using HTTP POST. Do this if the query string becomes too long (typically, there is a limit on a few thousand characters for GET requests).


Queries and responses are expressed in JSON.

The following sample query looks for Product Release events from companies within the Information Technology sector, published in January 2010. The 100 first results are returned.
